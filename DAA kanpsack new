//fractional knapsack

class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
        self.ratio = value / weight

def fractional_knapsack(items, capacity):
    # Sort items by value-to-weight ratio in descending order
    items.sort(key=lambda x: x.ratio, reverse=True)

    total_value = 0.0  # Variable to store the total value of the knapsack
    remaining_capacity = capacity

    for item in items:
        if remaining_capacity == 0:  # If the knapsack is full, break the loop
            break
        
        if item.weight <= remaining_capacity:
            # If the item can be taken completely, take it
            total_value += item.value
            remaining_capacity -= item.weight
        else:
            # If only part of the item can be taken, take the fraction
            total_value += item.ratio * remaining_capacity
            remaining_capacity = 0  # Knapsack is full after taking the fraction

    return total_value

# Example usage:
if __name__ == "__main__":
    n = int(input("Enter the number of items: "))
    values = list(map(int, input("Enter the values of items: ").split()))
    weights = list(map(int, input("Enter the weights of items: ").split()))
    capacity = int(input("Enter the capacity of the knapsack: "))

    # Create a list of items
    items = [Item(values[i], weights[i]) for i in range(n)]

    # Calculate the maximum value for the given capacity
    max_value = fractional_knapsack(items, capacity)

    print(f"The maximum value of items that can be carried: {max_value:.2f}")





// 0-1 knapsack

def knapsack(values, weights, capacity):
    n = len(values)
    # Create a DP table with dimensions (n+1) x (capacity+1)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # Fill the DP table
    for i in range(1, n + 1):  # Loop through items
        for w in range(1, capacity + 1):  # Loop through capacities
            if weights[i - 1] <= w:
                # Include the current item or exclude it
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                # Exclude the current item
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity], dp  # Return the maximum value and DP table for tracing

def get_selected_items(dp, values, weights, capacity):
    n = len(values)
    selected_items = []
    w = capacity

    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:  # Item was included
            selected_items.append(i - 1)
            w -= weights[i - 1]

    return selected_items

# Example usage:
if __name__ == "__main__":
    n = int(input("Enter the number of items: "))
    values = list(map(int, input("Enter the values of items: ").split()))
    weights = list(map(int, input("Enter the weights of items: ").split()))
    capacity = int(input("Enter the capacity of the knapsack: "))

    max_value, dp_table = knapsack(values, weights, capacity)
    selected_items = get_selected_items(dp_table, values, weights, capacity)

    print(f"Maximum value that can be carried: {max_value}")
    print(f"Selected items (0-indexed): {selected_items}")

