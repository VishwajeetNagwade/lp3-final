import heapq

class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ''
    def __lt__(self, other):
        return self.freq < other.freq

def printNodes(node, val=''):
    newVal = val + str(node.huff)
    if node.left:
        printNodes(node.left, newVal)
    if node.right:
        printNodes(node.right, newVal)
    if not node.left and not node.right:
        print(f"{node.symbol} -> {newVal}")

chars = [input("Enter character: ") for _ in range(int(input("Enter number of characters: ")))]
freq = [int(input(f"Enter frequency of {chars[i]}: ")) for i in range(len(chars))]

nodes = [Node(freq[i], chars[i]) for i in range(len(chars))]
heapq.heapify(nodes)

while len(nodes) > 1:
    left, right = heapq.heappop(nodes), heapq.heappop(nodes)
    left.huff, right.huff = '0', '1'
    heapq.heappush(nodes, Node(left.freq + right.freq, None, left, right))

print("Huffman Codes are:")
printNodes(nodes[0])
